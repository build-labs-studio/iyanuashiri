<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IyanuAshiri</title>
    <link>https://iyanuashiri.me/</link>
    <description>Recent content on IyanuAshiri</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Feb 2019 10:49:34 +0100</lastBuildDate>
    
	<atom:link href="https://iyanuashiri.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Subscribe</title>
      <link>https://iyanuashiri.me/subscribe/</link>
      <pubDate>Thu, 14 Feb 2019 10:49:34 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/subscribe/</guid>
      <description>Click on the subscribe link to get my articles immediately I publish something new.</description>
    </item>
    
    <item>
      <title>Type Hints: Adding Types to Legacy Python Codebases</title>
      <link>https://iyanuashiri.me/posts/adding-types-to-legacy-python-codebases/</link>
      <pubDate>Thu, 14 Feb 2019 09:45:57 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/posts/adding-types-to-legacy-python-codebases/</guid>
      <description>Type Hints: Adding Types to Legacy Codebases Introduction Python is an interpreted and dynamic language. This means Python code is executed at runtime and also doesn&amp;rsquo;t make use of a type system when defining language constructs such as variables and functions.
In Python 3.5, the typing module was introduced. This allows Python code to be gradually typed i.e Types can be added to some parts (variables, functions, classes etc.) of a codebase and checked at runtime (static typing) and some other parts (variables, functions etc.</description>
    </item>
    
    <item>
      <title>What You Don&#39;t Know Python Variables</title>
      <link>https://iyanuashiri.me/posts/what-you-dont-know-python-variables/</link>
      <pubDate>Mon, 28 Jan 2019 01:10:05 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/posts/what-you-dont-know-python-variables/</guid>
      <description>The first time you get introduced to Python&amp;rsquo;s variable, it is usually defined as &amp;ldquo;parts of your computerâ€™s memory where you store some information.&amp;rdquo; Some define it as a &amp;ldquo;storage placeholder for texts and numbers.&amp;rdquo; We will soon find out that Python&amp;rsquo;s variable is deeper than this.
Python&amp;rsquo;s variable is a reference to an object created in the computer&amp;rsquo;s memory. The object can be a String, Integer etc. In Python, everything is an object.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://iyanuashiri.me/about/</link>
      <pubDate>Sun, 02 Dec 2018 14:27:14 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/about/</guid>
      <description>Hi I&amp;rsquo;m Iyanuoluwa. My nickname is Ashiri (meaning secret). I&amp;rsquo;m a Lead Software Engineer at Teapot and a Technical Writer at Twilio. My favourite tool is Python, but if need be, I can use JavaScript. I am currently learning to use Golang.
I love to meet new and interesting people, read good books, and write about what I have read. I contribute to opensource, speak about new, hard, interesting stuff in the Python community, and mentor new developers.</description>
    </item>
    
    <item>
      <title>Getting Started with Pathlib</title>
      <link>https://iyanuashiri.me/posts/understanding-paths-in-python/</link>
      <pubDate>Fri, 30 Nov 2018 01:12:32 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/posts/understanding-paths-in-python/</guid>
      <description>Introduction This tutorial will guide you on how to use the Pathlib module for working with filesystem paths, the benefits, and understand the problem it solves since the Python standard library already contains os.path.
How is it Better than os.path os.path was the only way to work with filesystem paths, but it had some limitations. To perform certain tasks, you have to import from other standard library modules. For instance, suppose you want to list the files ending with .</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://iyanuashiri.me/contact/</link>
      <pubDate>Fri, 09 Nov 2018 04:08:39 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/contact/</guid>
      <description>Have a question? You can ask me anything
Your Name Email Address An email address is required.  Message   </description>
    </item>
    
    <item>
      <title>Build and Deploy Twitter Bots with Python, Tweepy and PythonAnywhere</title>
      <link>https://iyanuashiri.me/posts/build-and-deploy-twitter-bots/</link>
      <pubDate>Thu, 08 Nov 2018 21:24:44 +0100</pubDate>
      
      <guid>https://iyanuashiri.me/posts/build-and-deploy-twitter-bots/</guid>
      <description>A Twilio blog post that I wrote on how to build a Twitter bot using Python, Tweepy and PythonAnywhere. Click Here
If you enjoyed this article, don&amp;rsquo;t forget to share and comment below. Follow me on Twitter: @IyanuAshiri, I tweet about Python</description>
    </item>
    
  </channel>
</rss>